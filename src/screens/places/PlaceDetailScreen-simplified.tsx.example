// Simplified getPhotoUrls function after fixing admin web UI

const getPhotoUrls = (): string[] => {
  if (!place) return [];
  
  // Simply use pre-generated URLs from database (no API key validation needed)
  if (place.photos_urls && place.photos_urls.length > 0) {
    console.log('üóÑÔ∏è PlaceDetails rendered from database cache');
    return place.photos_urls;
  }
  
  // Fallback: Generate URLs from photo references (rare case)
  if (place.photo_references && place.photo_references.length > 0) {
    const validReferences = place.photo_references.filter(ref => 
      ref.photo_reference && !ref.photo_reference.startsWith('ATplDJ')
    );
    
    if (validReferences.length > 0) {
      console.log('‚ö†Ô∏è FALLBACK: Generating photo URLs from references');
      const limitedReferences = validReferences.slice(0, 1);
      return limitedReferences.map(ref => getGooglePhotoUrl(ref.photo_reference));
    }
  }
  
  return [];
};

// Simplified cache enhancement logic
if (googleData && googleData.photo_urls && googleData.photo_urls.length > 0) {
  // Only update if missing photos (no API key validation needed)
  if (!placeData.photos_urls || placeData.photos_urls.length === 0) {
    console.log('üóÑÔ∏è PHOTO ENHANCEMENT: Adding cached photo URLs');
    // ... update logic
  }
} 